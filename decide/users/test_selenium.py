# Generated by Selenium IDE
from base.tests import BaseTestCase
from django.contrib.auth.models import User
from voting.models import Voting, Question
from census.models import Census
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from django.utils import timezone

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

class TestFiltroname(StaticLiveServerTestCase):
  def setUp(self):
    self.base = BaseTestCase()
    self.base.setUp()
    options = webdriver.ChromeOptions()
    options.headless = True
    self.driver = webdriver.Chrome(options=options)
    super().setUp()

    self.user = User.objects.filter(username="noadmin").first()

    self.q1 = Question(desc='Question #1')
    self.q1.save()
    self.v1 = Voting(name='Voting #1', question=self.q1, start_date=timezone.now(), end_date=timezone.now())
    self.v1.save()
    self.c1 = Census(voter_id=self.user.id, voting_id=self.v1.id)
    self.c1.save()

    self.q2 = Question(desc='Question #2')
    self.q2.save()
    self.v2 = Voting(name='Voting #2', question=self.q2, start_date=timezone.now())
    self.v2.save()
    self.c2 = Census(voter_id=self.user.id, voting_id=self.v2.id)
    self.c2.save()

    self.q3 = Question(desc='Question #3')
    self.q3.save()
    self.v3 = Voting(name='Voting #3', question=self.q3)
    self.v3.save()
    self.c3 = Census(voter_id=self.user.id, voting_id=self.v3.id)
    self.c3.save()
  
  def tearDown(self):
    super().tearDown()
    self.driver.quit()
    self.base.tearDown()
  
  def test_filtroname(self):
    self.driver.get(self.live_server_url + "/")
    self.driver.set_window_size(1920, 1036)
    self.driver.find_element(By.LINK_TEXT, "Login").click()
    self.driver.find_element(By.NAME, "username").send_keys(self.user.username)
    self.driver.find_element(By.NAME, "password").send_keys("qwerty")
    self.driver.find_element(By.NAME, "password").send_keys(Keys.ENTER)
    self.driver.find_element(By.LINK_TEXT, "Acceso").click()
    self.driver.find_element(By.ID, "name").click()
    self.driver.find_element(By.ID, "name").send_keys(self.v1.name)
    self.driver.find_element(By.ID, "name").send_keys(Keys.ENTER)
    self.driver.find_element(By.ID, "name").send_keys(self.v2.name)
    self.driver.find_element(By.ID, "name").send_keys(Keys.ENTER)
    self.driver.find_element(By.ID, "name").send_keys(self.v3.name)
    self.driver.find_element(By.ID, "name").send_keys(Keys.ENTER)
    self.driver.get(self.live_server_url + "/logout")
    
class TestFiltrofecha(StaticLiveServerTestCase):
  def setUp(self):
    self.base = BaseTestCase()
    self.base.setUp()
    options = webdriver.ChromeOptions()
    options.headless = True
    self.driver = webdriver.Chrome(options=options)
    super().setUp()

    self.user = User.objects.filter(username="noadmin").first()

    self.q1 = Question(desc='Question #1')
    self.q1.save()
    self.v1 = Voting(name='Voting #1', question=self.q1, start_date=timezone.now(), end_date=timezone.now())
    self.v1.save()
    self.c1 = Census(voter_id=self.user.id, voting_id=self.v1.id)
    self.c1.save()

    self.q2 = Question(desc='Question #2')
    self.q2.save()
    self.v2 = Voting(name='Voting #2', question=self.q2, start_date=timezone.now())
    self.v2.save()
    self.c2 = Census(voter_id=self.user.id, voting_id=self.v2.id)
    self.c2.save()

    self.q3 = Question(desc='Question #3')
    self.q3.save()
    self.v3 = Voting(name='Voting #3', question=self.q3)
    self.v3.save()
    self.c3 = Census(voter_id=self.user.id, voting_id=self.v3.id)
    self.c3.save()
  
  def tearDown(self):
    super().tearDown()
    self.driver.quit()
    self.base.tearDown()
  
  def test_filtrofecha(self):
    self.driver.get(self.live_server_url + "/")
    self.driver.set_window_size(1392, 774)
    self.driver.find_element(By.LINK_TEXT, "Login").click()
    self.driver.find_element(By.NAME, "username").send_keys(self.user.username)
    self.driver.find_element(By.NAME, "password").send_keys("qwerty")
    self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
    self.driver.find_element(By.LINK_TEXT, "Acceso").click()
    self.driver.find_element(By.ID, "start_date").click()
    self.driver.find_element(By.ID, "start_date").send_keys("2022-12-04")
    self.driver.find_element(By.ID, "end_date").click()
    self.driver.find_element(By.ID, "end_date").send_keys("2022-12-06")
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    self.driver.find_element(By.ID, "end_date").send_keys("")
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    self.driver.get(self.live_server_url + "/logout")

class TestCerrado(StaticLiveServerTestCase):
  def setUp(self):
    self.base = BaseTestCase()
    self.base.setUp()
    options = webdriver.ChromeOptions()
    options.headless = True
    self.driver = webdriver.Chrome(options=options)
    super().setUp()

    self.user = User.objects.filter(username="noadmin").first()

    self.q1 = Question(desc='Question #1')
    self.q1.save()
    self.v1 = Voting(name='Voting #1', question=self.q1, start_date=timezone.now(), end_date=timezone.now())
    self.v1.save()
    self.c1 = Census(voter_id=self.user.id, voting_id=self.v1.id)
    self.c1.save()

    self.q2 = Question(desc='Question #2')
    self.q2.save()
    self.v2 = Voting(name='Voting #2', question=self.q2, start_date=timezone.now())
    self.v2.save()
    self.c2 = Census(voter_id=self.user.id, voting_id=self.v2.id)
    self.c2.save()

    self.q3 = Question(desc='Question #3')
    self.q3.save()
    self.v3 = Voting(name='Voting #3', question=self.q3)
    self.v3.save()
    self.c3 = Census(voter_id=self.user.id, voting_id=self.v3.id)
    self.c3.save()
  
  def tearDown(self):
    super().tearDown()
    self.driver.quit()
    self.base.tearDown()
  
  def test_testCerrado(self):
    self.driver.get(self.live_server_url + "/")
    self.driver.set_window_size(1392, 774)
    self.driver.find_element(By.LINK_TEXT, "Login").click()
    self.driver.find_element(By.NAME, "username").send_keys(self.user.username)
    self.driver.find_element(By.NAME, "password").send_keys("qwerty")
    self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
    self.driver.find_element(By.LINK_TEXT, "Acceso").click()
    self.driver.find_element(By.CSS_SELECTOR, ".voting-card:nth-child(1)").click()
    self.assertEqual(self.driver.current_url, f"{self.live_server_url}/visualizer/{self.v1.id}/")
    self.driver.get(self.live_server_url + "/logout")

class TestAbierto(StaticLiveServerTestCase):
  def setUp(self):
    self.base = BaseTestCase()
    self.base.setUp()
    options = webdriver.ChromeOptions()
    options.headless = True
    self.driver = webdriver.Chrome(options=options)
    super().setUp()

    self.user = User.objects.filter(username="noadmin").first()

    self.q1 = Question(desc='Question #1')
    self.q1.save()
    self.v1 = Voting(name='Voting #1', question=self.q1, start_date=timezone.now(), end_date=timezone.now())
    self.v1.save()
    self.c1 = Census(voter_id=self.user.id, voting_id=self.v1.id)
    self.c1.save()

    self.q2 = Question(desc='Question #2')
    self.q2.save()
    self.v2 = Voting(name='Voting #2', question=self.q2, start_date=timezone.now())
    self.v2.save()
    self.c2 = Census(voter_id=self.user.id, voting_id=self.v2.id)
    self.c2.save()

    self.q3 = Question(desc='Question #3')
    self.q3.save()
    self.v3 = Voting(name='Voting #3', question=self.q3)
    self.v3.save()
    self.c3 = Census(voter_id=self.user.id, voting_id=self.v3.id)
    self.c3.save()

    
  
  def tearDown(self):
    super().tearDown()
    self.driver.quit()
    self.base.tearDown()
  
  def test_testAbierto(self):
    self.driver.get(self.live_server_url + "/")
    self.driver.set_window_size(1392, 774)
    self.driver.find_element(By.LINK_TEXT, "Login").click()
    self.driver.find_element(By.NAME, "username").send_keys(self.user.username)
    self.driver.find_element(By.NAME, "password").send_keys("qwerty")
    self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
    self.driver.find_element(By.LINK_TEXT, "Acceso").click()
    self.driver.find_element(By.CSS_SELECTOR, ".voting-card:nth-child(2)").click()
    self.assertEqual(self.driver.current_url, f"{self.live_server_url}/booth/{self.v2.id}/")
    self.driver.get(self.live_server_url + "/logout") 
    
class TestCreado(StaticLiveServerTestCase):
  def setUp(self):
    self.base = BaseTestCase()
    self.base.setUp()
    options = webdriver.ChromeOptions()
    options.headless = True
    self.driver = webdriver.Chrome(options=options)
    super().setUp()

    self.user = User.objects.filter(username="noadmin").first()

    self.q1 = Question(desc='Question #1')
    self.q1.save()
    self.v1 = Voting(name='Voting #1', question=self.q1, start_date=timezone.now(), end_date=timezone.now())
    self.v1.save()
    self.c1 = Census(voter_id=self.user.id, voting_id=self.v1.id)
    self.c1.save()

    self.q2 = Question(desc='Question #2')
    self.q2.save()
    self.v2 = Voting(name='Voting #2', question=self.q2, start_date=timezone.now())
    self.v2.save()
    self.c2 = Census(voter_id=self.user.id, voting_id=self.v2.id)
    self.c2.save()

    self.q3 = Question(desc='Question #3')
    self.q3.save()
    self.v3 = Voting(name='Voting #3', question=self.q3)
    self.v3.save()
    self.c3 = Census(voter_id=self.user.id, voting_id=self.v3.id)
    self.c3.save()
  
  def tearDown(self):
    super().tearDown()
    self.driver.quit()
    self.base.tearDown()
  
  def test_testCreado(self):
    self.driver.get(self.live_server_url + "/") 
    self.driver.set_window_size(1392, 774)
    self.driver.find_element(By.LINK_TEXT, "Login").click()
    self.driver.find_element(By.NAME, "username").send_keys(self.user.username)
    self.driver.find_element(By.NAME, "password").send_keys("qwerty")
    self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
    self.driver.find_element(By.LINK_TEXT, "Acceso").click()
    self.driver.find_element(By.CSS_SELECTOR, ".voting-card:nth-child(3)").click()
    self.assertEqual(self.driver.current_url, f"{self.live_server_url}/visualizer/{self.v3.id}/")
    self.driver.get(self.live_server_url + "/logout") 
    